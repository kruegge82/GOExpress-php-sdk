<?php
/**
 * Shipment
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\goexpress
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GO! Connect Realtime Order & Label API
 *
 * API for creating, updating, canceling shipments and generating labels for GO! Express & Logistics.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\goexpress\Model;

use \ArrayAccess;
use \kruegge82\goexpress\ObjectSerializer;

/**
 * Shipment Class Doc Comment
 *
 * @category Class
 * @description Core shipment object containing all parameters needed for order creation, update, or cancellation.
 * @package  kruegge82\goexpress
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Shipment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Shipment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'hwb_number' => 'string',
        'order_status' => 'string',
        'validation' => 'string',
        'service' => 'string',
        'weight' => 'string',
        'content' => 'string',
        'customer_reference' => 'string',
        'self_pickup' => 'string',
        'self_delivery' => 'string',
        'dimensions' => 'string',
        'package_count' => 'string',
        'freight_collect' => 'string',
        'ident_check' => 'string',
        'receipt_notice' => 'string',
        'is_neutral_pickup' => 'string',
        'pickup' => '\kruegge82\goexpress\Model\TimeWindow',
        'delivery' => '\kruegge82\goexpress\Model\TimeWindow',
        'insurance' => '\kruegge82\goexpress\Model\Money',
        'value_of_goods' => '\kruegge82\goexpress\Model\Money',
        'cash_on_delivery' => '\kruegge82\goexpress\Model\Money'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'hwb_number' => null,
        'order_status' => null,
        'validation' => null,
        'service' => null,
        'weight' => null,
        'content' => null,
        'customer_reference' => null,
        'self_pickup' => null,
        'self_delivery' => null,
        'dimensions' => null,
        'package_count' => null,
        'freight_collect' => null,
        'ident_check' => null,
        'receipt_notice' => null,
        'is_neutral_pickup' => null,
        'pickup' => null,
        'delivery' => null,
        'insurance' => null,
        'value_of_goods' => null,
        'cash_on_delivery' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'hwb_number' => false,
        'order_status' => false,
        'validation' => false,
        'service' => false,
        'weight' => false,
        'content' => false,
        'customer_reference' => false,
        'self_pickup' => false,
        'self_delivery' => false,
        'dimensions' => false,
        'package_count' => false,
        'freight_collect' => false,
        'ident_check' => false,
        'receipt_notice' => false,
        'is_neutral_pickup' => false,
        'pickup' => false,
        'delivery' => false,
        'insurance' => false,
        'value_of_goods' => false,
        'cash_on_delivery' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'hwb_number' => 'hwbNumber',
        'order_status' => 'orderStatus',
        'validation' => 'validation',
        'service' => 'service',
        'weight' => 'weight',
        'content' => 'content',
        'customer_reference' => 'customerReference',
        'self_pickup' => 'selfPickup',
        'self_delivery' => 'selfDelivery',
        'dimensions' => 'dimensions',
        'package_count' => 'packageCount',
        'freight_collect' => 'freightCollect',
        'ident_check' => 'identCheck',
        'receipt_notice' => 'receiptNotice',
        'is_neutral_pickup' => 'isNeutralPickup',
        'pickup' => 'pickup',
        'delivery' => 'delivery',
        'insurance' => 'insurance',
        'value_of_goods' => 'valueOfGoods',
        'cash_on_delivery' => 'cashOnDelivery'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'hwb_number' => 'setHwbNumber',
        'order_status' => 'setOrderStatus',
        'validation' => 'setValidation',
        'service' => 'setService',
        'weight' => 'setWeight',
        'content' => 'setContent',
        'customer_reference' => 'setCustomerReference',
        'self_pickup' => 'setSelfPickup',
        'self_delivery' => 'setSelfDelivery',
        'dimensions' => 'setDimensions',
        'package_count' => 'setPackageCount',
        'freight_collect' => 'setFreightCollect',
        'ident_check' => 'setIdentCheck',
        'receipt_notice' => 'setReceiptNotice',
        'is_neutral_pickup' => 'setIsNeutralPickup',
        'pickup' => 'setPickup',
        'delivery' => 'setDelivery',
        'insurance' => 'setInsurance',
        'value_of_goods' => 'setValueOfGoods',
        'cash_on_delivery' => 'setCashOnDelivery'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'hwb_number' => 'getHwbNumber',
        'order_status' => 'getOrderStatus',
        'validation' => 'getValidation',
        'service' => 'getService',
        'weight' => 'getWeight',
        'content' => 'getContent',
        'customer_reference' => 'getCustomerReference',
        'self_pickup' => 'getSelfPickup',
        'self_delivery' => 'getSelfDelivery',
        'dimensions' => 'getDimensions',
        'package_count' => 'getPackageCount',
        'freight_collect' => 'getFreightCollect',
        'ident_check' => 'getIdentCheck',
        'receipt_notice' => 'getReceiptNotice',
        'is_neutral_pickup' => 'getIsNeutralPickup',
        'pickup' => 'getPickup',
        'delivery' => 'getDelivery',
        'insurance' => 'getInsurance',
        'value_of_goods' => 'getValueOfGoods',
        'cash_on_delivery' => 'getCashOnDelivery'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ORDER_STATUS__NEW = 'New';
    public const ORDER_STATUS_RELEASED = 'Released';
    public const ORDER_STATUS_CANCELLED = 'Cancelled';
    public const SERVICE_ON = 'ON';
    public const SERVICE_INT = 'INT';
    public const SERVICE_LET = 'LET';
    public const SERVICE_INL = 'INL';
    public const SERVICE_PSN = 'PSN';
    public const SERVICE_PSI = 'PSI';
    public const SERVICE_ONC = 'ONC';
    public const SERVICE_LEC = 'LEC';
    public const SERVICE_DI = 'DI';
    public const SELF_PICKUP_YES = 'Yes';
    public const SELF_PICKUP_NO = 'No';
    public const SELF_DELIVERY_YES = 'Yes';
    public const SELF_DELIVERY_NO = 'No';
    public const FREIGHT_COLLECT_YES = 'Yes';
    public const FREIGHT_COLLECT_NO = 'No';
    public const IDENT_CHECK_YES = 'Yes';
    public const IDENT_CHECK_NO = 'No';
    public const RECEIPT_NOTICE_YES = 'Yes';
    public const RECEIPT_NOTICE_NO = 'No';
    public const IS_NEUTRAL_PICKUP_YES = 'Yes';
    public const IS_NEUTRAL_PICKUP_NO = 'No';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderStatusAllowableValues()
    {
        return [
            self::ORDER_STATUS__NEW,
            self::ORDER_STATUS_RELEASED,
            self::ORDER_STATUS_CANCELLED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getServiceAllowableValues()
    {
        return [
            self::SERVICE_ON,
            self::SERVICE_INT,
            self::SERVICE_LET,
            self::SERVICE_INL,
            self::SERVICE_PSN,
            self::SERVICE_PSI,
            self::SERVICE_ONC,
            self::SERVICE_LEC,
            self::SERVICE_DI,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSelfPickupAllowableValues()
    {
        return [
            self::SELF_PICKUP_YES,
            self::SELF_PICKUP_NO,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSelfDeliveryAllowableValues()
    {
        return [
            self::SELF_DELIVERY_YES,
            self::SELF_DELIVERY_NO,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFreightCollectAllowableValues()
    {
        return [
            self::FREIGHT_COLLECT_YES,
            self::FREIGHT_COLLECT_NO,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIdentCheckAllowableValues()
    {
        return [
            self::IDENT_CHECK_YES,
            self::IDENT_CHECK_NO,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReceiptNoticeAllowableValues()
    {
        return [
            self::RECEIPT_NOTICE_YES,
            self::RECEIPT_NOTICE_NO,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIsNeutralPickupAllowableValues()
    {
        return [
            self::IS_NEUTRAL_PICKUP_YES,
            self::IS_NEUTRAL_PICKUP_NO,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('hwb_number', $data ?? [], null);
        $this->setIfExists('order_status', $data ?? [], null);
        $this->setIfExists('validation', $data ?? [], null);
        $this->setIfExists('service', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('content', $data ?? [], null);
        $this->setIfExists('customer_reference', $data ?? [], null);
        $this->setIfExists('self_pickup', $data ?? [], null);
        $this->setIfExists('self_delivery', $data ?? [], null);
        $this->setIfExists('dimensions', $data ?? [], null);
        $this->setIfExists('package_count', $data ?? [], null);
        $this->setIfExists('freight_collect', $data ?? [], null);
        $this->setIfExists('ident_check', $data ?? [], null);
        $this->setIfExists('receipt_notice', $data ?? [], null);
        $this->setIfExists('is_neutral_pickup', $data ?? [], null);
        $this->setIfExists('pickup', $data ?? [], null);
        $this->setIfExists('delivery', $data ?? [], null);
        $this->setIfExists('insurance', $data ?? [], null);
        $this->setIfExists('value_of_goods', $data ?? [], null);
        $this->setIfExists('cash_on_delivery', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['hwb_number']) && (mb_strlen($this->container['hwb_number']) > 12)) {
            $invalidProperties[] = "invalid value for 'hwb_number', the character length must be smaller than or equal to 12.";
        }

        $allowedValues = $this->getOrderStatusAllowableValues();
        if (!is_null($this->container['order_status']) && !in_array($this->container['order_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'order_status', must be one of '%s'",
                $this->container['order_status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['service'] === null) {
            $invalidProperties[] = "'service' can't be null";
        }
        $allowedValues = $this->getServiceAllowableValues();
        if (!is_null($this->container['service']) && !in_array($this->container['service'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'service', must be one of '%s'",
                $this->container['service'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['weight'] === null) {
            $invalidProperties[] = "'weight' can't be null";
        }
        $allowedValues = $this->getSelfPickupAllowableValues();
        if (!is_null($this->container['self_pickup']) && !in_array($this->container['self_pickup'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'self_pickup', must be one of '%s'",
                $this->container['self_pickup'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSelfDeliveryAllowableValues();
        if (!is_null($this->container['self_delivery']) && !in_array($this->container['self_delivery'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'self_delivery', must be one of '%s'",
                $this->container['self_delivery'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['package_count'] === null) {
            $invalidProperties[] = "'package_count' can't be null";
        }
        $allowedValues = $this->getFreightCollectAllowableValues();
        if (!is_null($this->container['freight_collect']) && !in_array($this->container['freight_collect'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'freight_collect', must be one of '%s'",
                $this->container['freight_collect'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIdentCheckAllowableValues();
        if (!is_null($this->container['ident_check']) && !in_array($this->container['ident_check'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ident_check', must be one of '%s'",
                $this->container['ident_check'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getReceiptNoticeAllowableValues();
        if (!is_null($this->container['receipt_notice']) && !in_array($this->container['receipt_notice'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'receipt_notice', must be one of '%s'",
                $this->container['receipt_notice'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIsNeutralPickupAllowableValues();
        if (!is_null($this->container['is_neutral_pickup']) && !in_array($this->container['is_neutral_pickup'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'is_neutral_pickup', must be one of '%s'",
                $this->container['is_neutral_pickup'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['pickup'] === null) {
            $invalidProperties[] = "'pickup' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets hwb_number
     *
     * @return string|null
     */
    public function getHwbNumber()
    {
        return $this->container['hwb_number'];
    }

    /**
     * Sets hwb_number
     *
     * @param string|null $hwb_number hwb_number
     *
     * @return self
     */
    public function setHwbNumber($hwb_number)
    {
        if (is_null($hwb_number)) {
            throw new \InvalidArgumentException('non-nullable hwb_number cannot be null');
        }
        if ((mb_strlen($hwb_number) > 12)) {
            throw new \InvalidArgumentException('invalid length for $hwb_number when calling Shipment., must be smaller than or equal to 12.');
        }

        $this->container['hwb_number'] = $hwb_number;

        return $this;
    }

    /**
     * Gets order_status
     *
     * @return string|null
     */
    public function getOrderStatus()
    {
        return $this->container['order_status'];
    }

    /**
     * Sets order_status
     *
     * @param string|null $order_status order_status
     *
     * @return self
     */
    public function setOrderStatus($order_status)
    {
        if (is_null($order_status)) {
            throw new \InvalidArgumentException('non-nullable order_status cannot be null');
        }
        $allowedValues = $this->getOrderStatusAllowableValues();
        if (!in_array($order_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'order_status', must be one of '%s'",
                    $order_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['order_status'] = $order_status;

        return $this;
    }

    /**
     * Gets validation
     *
     * @return string|null
     */
    public function getValidation()
    {
        return $this->container['validation'];
    }

    /**
     * Sets validation
     *
     * @param string|null $validation validation
     *
     * @return self
     */
    public function setValidation($validation)
    {
        if (is_null($validation)) {
            throw new \InvalidArgumentException('non-nullable validation cannot be null');
        }
        $this->container['validation'] = $validation;

        return $this;
    }

    /**
     * Gets service
     *
     * @return string
     */
    public function getService()
    {
        return $this->container['service'];
    }

    /**
     * Sets service
     *
     * @param string $service Service code for the shipment. - ON: GO! Overnight - INT: GO! Worldwide - LET: GO! Overnight - Letter - INL: GO! Worldwide - Letter - PSN: Parcel Service National - PSI: Parcel Service International - ONC: GO! Overnight coded delivery (Germany only) - LEC: GO! Overnight Letter coded delivery (Germany only) - DI: Direct Shipment (prior coordination required)
     *
     * @return self
     */
    public function setService($service)
    {
        if (is_null($service)) {
            throw new \InvalidArgumentException('non-nullable service cannot be null');
        }
        $allowedValues = $this->getServiceAllowableValues();
        if (!in_array($service, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'service', must be one of '%s'",
                    $service,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['service'] = $service;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return string
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param string $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string|null
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string|null $content content
     *
     * @return self
     */
    public function setContent($content)
    {
        if (is_null($content)) {
            throw new \InvalidArgumentException('non-nullable content cannot be null');
        }
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets customer_reference
     *
     * @return string|null
     */
    public function getCustomerReference()
    {
        return $this->container['customer_reference'];
    }

    /**
     * Sets customer_reference
     *
     * @param string|null $customer_reference customer_reference
     *
     * @return self
     */
    public function setCustomerReference($customer_reference)
    {
        if (is_null($customer_reference)) {
            throw new \InvalidArgumentException('non-nullable customer_reference cannot be null');
        }
        $this->container['customer_reference'] = $customer_reference;

        return $this;
    }

    /**
     * Gets self_pickup
     *
     * @return string|null
     */
    public function getSelfPickup()
    {
        return $this->container['self_pickup'];
    }

    /**
     * Sets self_pickup
     *
     * @param string|null $self_pickup self_pickup
     *
     * @return self
     */
    public function setSelfPickup($self_pickup)
    {
        if (is_null($self_pickup)) {
            throw new \InvalidArgumentException('non-nullable self_pickup cannot be null');
        }
        $allowedValues = $this->getSelfPickupAllowableValues();
        if (!in_array($self_pickup, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'self_pickup', must be one of '%s'",
                    $self_pickup,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['self_pickup'] = $self_pickup;

        return $this;
    }

    /**
     * Gets self_delivery
     *
     * @return string|null
     */
    public function getSelfDelivery()
    {
        return $this->container['self_delivery'];
    }

    /**
     * Sets self_delivery
     *
     * @param string|null $self_delivery self_delivery
     *
     * @return self
     */
    public function setSelfDelivery($self_delivery)
    {
        if (is_null($self_delivery)) {
            throw new \InvalidArgumentException('non-nullable self_delivery cannot be null');
        }
        $allowedValues = $this->getSelfDeliveryAllowableValues();
        if (!in_array($self_delivery, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'self_delivery', must be one of '%s'",
                    $self_delivery,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['self_delivery'] = $self_delivery;

        return $this;
    }

    /**
     * Gets dimensions
     *
     * @return string|null
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     *
     * @param string|null $dimensions dimensions
     *
     * @return self
     */
    public function setDimensions($dimensions)
    {
        if (is_null($dimensions)) {
            throw new \InvalidArgumentException('non-nullable dimensions cannot be null');
        }
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets package_count
     *
     * @return string
     */
    public function getPackageCount()
    {
        return $this->container['package_count'];
    }

    /**
     * Sets package_count
     *
     * @param string $package_count package_count
     *
     * @return self
     */
    public function setPackageCount($package_count)
    {
        if (is_null($package_count)) {
            throw new \InvalidArgumentException('non-nullable package_count cannot be null');
        }
        $this->container['package_count'] = $package_count;

        return $this;
    }

    /**
     * Gets freight_collect
     *
     * @return string|null
     */
    public function getFreightCollect()
    {
        return $this->container['freight_collect'];
    }

    /**
     * Sets freight_collect
     *
     * @param string|null $freight_collect freight_collect
     *
     * @return self
     */
    public function setFreightCollect($freight_collect)
    {
        if (is_null($freight_collect)) {
            throw new \InvalidArgumentException('non-nullable freight_collect cannot be null');
        }
        $allowedValues = $this->getFreightCollectAllowableValues();
        if (!in_array($freight_collect, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'freight_collect', must be one of '%s'",
                    $freight_collect,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['freight_collect'] = $freight_collect;

        return $this;
    }

    /**
     * Gets ident_check
     *
     * @return string|null
     */
    public function getIdentCheck()
    {
        return $this->container['ident_check'];
    }

    /**
     * Sets ident_check
     *
     * @param string|null $ident_check ident_check
     *
     * @return self
     */
    public function setIdentCheck($ident_check)
    {
        if (is_null($ident_check)) {
            throw new \InvalidArgumentException('non-nullable ident_check cannot be null');
        }
        $allowedValues = $this->getIdentCheckAllowableValues();
        if (!in_array($ident_check, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ident_check', must be one of '%s'",
                    $ident_check,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ident_check'] = $ident_check;

        return $this;
    }

    /**
     * Gets receipt_notice
     *
     * @return string|null
     */
    public function getReceiptNotice()
    {
        return $this->container['receipt_notice'];
    }

    /**
     * Sets receipt_notice
     *
     * @param string|null $receipt_notice receipt_notice
     *
     * @return self
     */
    public function setReceiptNotice($receipt_notice)
    {
        if (is_null($receipt_notice)) {
            throw new \InvalidArgumentException('non-nullable receipt_notice cannot be null');
        }
        $allowedValues = $this->getReceiptNoticeAllowableValues();
        if (!in_array($receipt_notice, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'receipt_notice', must be one of '%s'",
                    $receipt_notice,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['receipt_notice'] = $receipt_notice;

        return $this;
    }

    /**
     * Gets is_neutral_pickup
     *
     * @return string|null
     */
    public function getIsNeutralPickup()
    {
        return $this->container['is_neutral_pickup'];
    }

    /**
     * Sets is_neutral_pickup
     *
     * @param string|null $is_neutral_pickup is_neutral_pickup
     *
     * @return self
     */
    public function setIsNeutralPickup($is_neutral_pickup)
    {
        if (is_null($is_neutral_pickup)) {
            throw new \InvalidArgumentException('non-nullable is_neutral_pickup cannot be null');
        }
        $allowedValues = $this->getIsNeutralPickupAllowableValues();
        if (!in_array($is_neutral_pickup, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'is_neutral_pickup', must be one of '%s'",
                    $is_neutral_pickup,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['is_neutral_pickup'] = $is_neutral_pickup;

        return $this;
    }

    /**
     * Gets pickup
     *
     * @return \kruegge82\goexpress\Model\TimeWindow
     */
    public function getPickup()
    {
        return $this->container['pickup'];
    }

    /**
     * Sets pickup
     *
     * @param \kruegge82\goexpress\Model\TimeWindow $pickup pickup
     *
     * @return self
     */
    public function setPickup($pickup)
    {
        if (is_null($pickup)) {
            throw new \InvalidArgumentException('non-nullable pickup cannot be null');
        }
        $this->container['pickup'] = $pickup;

        return $this;
    }

    /**
     * Gets delivery
     *
     * @return \kruegge82\goexpress\Model\TimeWindow|null
     */
    public function getDelivery()
    {
        return $this->container['delivery'];
    }

    /**
     * Sets delivery
     *
     * @param \kruegge82\goexpress\Model\TimeWindow|null $delivery delivery
     *
     * @return self
     */
    public function setDelivery($delivery)
    {
        if (is_null($delivery)) {
            throw new \InvalidArgumentException('non-nullable delivery cannot be null');
        }
        $this->container['delivery'] = $delivery;

        return $this;
    }

    /**
     * Gets insurance
     *
     * @return \kruegge82\goexpress\Model\Money|null
     */
    public function getInsurance()
    {
        return $this->container['insurance'];
    }

    /**
     * Sets insurance
     *
     * @param \kruegge82\goexpress\Model\Money|null $insurance insurance
     *
     * @return self
     */
    public function setInsurance($insurance)
    {
        if (is_null($insurance)) {
            throw new \InvalidArgumentException('non-nullable insurance cannot be null');
        }
        $this->container['insurance'] = $insurance;

        return $this;
    }

    /**
     * Gets value_of_goods
     *
     * @return \kruegge82\goexpress\Model\Money|null
     */
    public function getValueOfGoods()
    {
        return $this->container['value_of_goods'];
    }

    /**
     * Sets value_of_goods
     *
     * @param \kruegge82\goexpress\Model\Money|null $value_of_goods value_of_goods
     *
     * @return self
     */
    public function setValueOfGoods($value_of_goods)
    {
        if (is_null($value_of_goods)) {
            throw new \InvalidArgumentException('non-nullable value_of_goods cannot be null');
        }
        $this->container['value_of_goods'] = $value_of_goods;

        return $this;
    }

    /**
     * Gets cash_on_delivery
     *
     * @return \kruegge82\goexpress\Model\Money|null
     */
    public function getCashOnDelivery()
    {
        return $this->container['cash_on_delivery'];
    }

    /**
     * Sets cash_on_delivery
     *
     * @param \kruegge82\goexpress\Model\Money|null $cash_on_delivery cash_on_delivery
     *
     * @return self
     */
    public function setCashOnDelivery($cash_on_delivery)
    {
        if (is_null($cash_on_delivery)) {
            throw new \InvalidArgumentException('non-nullable cash_on_delivery cannot be null');
        }
        $this->container['cash_on_delivery'] = $cash_on_delivery;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


