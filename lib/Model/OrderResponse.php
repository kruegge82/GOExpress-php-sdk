<?php
/**
 * OrderResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\goexpress
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GO! Connect Realtime Order & Label API
 *
 * API for creating, updating, canceling shipments and generating labels for GO! Express & Logistics.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\goexpress\Model;

use \ArrayAccess;
use \kruegge82\goexpress\ObjectSerializer;

/**
 * OrderResponse Class Doc Comment
 *
 * @category Class
 * @description Response from createOrder endpoint, including tracking information and label data.
 * @package  kruegge82\goexpress
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'hwb_number' => 'string',
        'order_status' => 'string',
        'pickup_date' => 'string',
        'delivery_date' => 'string',
        'transit_info' => '\kruegge82\goexpress\Model\OrderResponseTransitInfo',
        'hwb_or_package_label' => 'string',
        'package' => '\kruegge82\goexpress\Model\OrderResponsePackageInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'hwb_number' => null,
        'order_status' => null,
        'pickup_date' => null,
        'delivery_date' => null,
        'transit_info' => null,
        'hwb_or_package_label' => null,
        'package' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'hwb_number' => false,
        'order_status' => false,
        'pickup_date' => false,
        'delivery_date' => false,
        'transit_info' => false,
        'hwb_or_package_label' => false,
        'package' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'hwb_number' => 'hwbNumber',
        'order_status' => 'orderStatus',
        'pickup_date' => 'pickupDate',
        'delivery_date' => 'deliveryDate',
        'transit_info' => 'transitInfo',
        'hwb_or_package_label' => 'hwbOrPackageLabel',
        'package' => 'package'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'hwb_number' => 'setHwbNumber',
        'order_status' => 'setOrderStatus',
        'pickup_date' => 'setPickupDate',
        'delivery_date' => 'setDeliveryDate',
        'transit_info' => 'setTransitInfo',
        'hwb_or_package_label' => 'setHwbOrPackageLabel',
        'package' => 'setPackage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'hwb_number' => 'getHwbNumber',
        'order_status' => 'getOrderStatus',
        'pickup_date' => 'getPickupDate',
        'delivery_date' => 'getDeliveryDate',
        'transit_info' => 'getTransitInfo',
        'hwb_or_package_label' => 'getHwbOrPackageLabel',
        'package' => 'getPackage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('hwb_number', $data ?? [], null);
        $this->setIfExists('order_status', $data ?? [], null);
        $this->setIfExists('pickup_date', $data ?? [], null);
        $this->setIfExists('delivery_date', $data ?? [], null);
        $this->setIfExists('transit_info', $data ?? [], null);
        $this->setIfExists('hwb_or_package_label', $data ?? [], null);
        $this->setIfExists('package', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets hwb_number
     *
     * @return string|null
     */
    public function getHwbNumber()
    {
        return $this->container['hwb_number'];
    }

    /**
     * Sets hwb_number
     *
     * @param string|null $hwb_number hwb_number
     *
     * @return self
     */
    public function setHwbNumber($hwb_number)
    {
        if (is_null($hwb_number)) {
            throw new \InvalidArgumentException('non-nullable hwb_number cannot be null');
        }
        $this->container['hwb_number'] = $hwb_number;

        return $this;
    }

    /**
     * Gets order_status
     *
     * @return string|null
     */
    public function getOrderStatus()
    {
        return $this->container['order_status'];
    }

    /**
     * Sets order_status
     *
     * @param string|null $order_status order_status
     *
     * @return self
     */
    public function setOrderStatus($order_status)
    {
        if (is_null($order_status)) {
            throw new \InvalidArgumentException('non-nullable order_status cannot be null');
        }
        $this->container['order_status'] = $order_status;

        return $this;
    }

    /**
     * Gets pickup_date
     *
     * @return string|null
     */
    public function getPickupDate()
    {
        return $this->container['pickup_date'];
    }

    /**
     * Sets pickup_date
     *
     * @param string|null $pickup_date pickup_date
     *
     * @return self
     */
    public function setPickupDate($pickup_date)
    {
        if (is_null($pickup_date)) {
            throw new \InvalidArgumentException('non-nullable pickup_date cannot be null');
        }
        $this->container['pickup_date'] = $pickup_date;

        return $this;
    }

    /**
     * Gets delivery_date
     *
     * @return string|null
     */
    public function getDeliveryDate()
    {
        return $this->container['delivery_date'];
    }

    /**
     * Sets delivery_date
     *
     * @param string|null $delivery_date delivery_date
     *
     * @return self
     */
    public function setDeliveryDate($delivery_date)
    {
        if (is_null($delivery_date)) {
            throw new \InvalidArgumentException('non-nullable delivery_date cannot be null');
        }
        $this->container['delivery_date'] = $delivery_date;

        return $this;
    }

    /**
     * Gets transit_info
     *
     * @return \kruegge82\goexpress\Model\OrderResponseTransitInfo|null
     */
    public function getTransitInfo()
    {
        return $this->container['transit_info'];
    }

    /**
     * Sets transit_info
     *
     * @param \kruegge82\goexpress\Model\OrderResponseTransitInfo|null $transit_info transit_info
     *
     * @return self
     */
    public function setTransitInfo($transit_info)
    {
        if (is_null($transit_info)) {
            throw new \InvalidArgumentException('non-nullable transit_info cannot be null');
        }
        $this->container['transit_info'] = $transit_info;

        return $this;
    }

    /**
     * Gets hwb_or_package_label
     *
     * @return string|null
     */
    public function getHwbOrPackageLabel()
    {
        return $this->container['hwb_or_package_label'];
    }

    /**
     * Sets hwb_or_package_label
     *
     * @param string|null $hwb_or_package_label hwb_or_package_label
     *
     * @return self
     */
    public function setHwbOrPackageLabel($hwb_or_package_label)
    {
        if (is_null($hwb_or_package_label)) {
            throw new \InvalidArgumentException('non-nullable hwb_or_package_label cannot be null');
        }
        $this->container['hwb_or_package_label'] = $hwb_or_package_label;

        return $this;
    }

    /**
     * Gets package
     *
     * @return \kruegge82\goexpress\Model\OrderResponsePackageInner[]|null
     */
    public function getPackage()
    {
        return $this->container['package'];
    }

    /**
     * Sets package
     *
     * @param \kruegge82\goexpress\Model\OrderResponsePackageInner[]|null $package package
     *
     * @return self
     */
    public function setPackage($package)
    {
        if (is_null($package)) {
            throw new \InvalidArgumentException('non-nullable package cannot be null');
        }
        $this->container['package'] = $package;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


